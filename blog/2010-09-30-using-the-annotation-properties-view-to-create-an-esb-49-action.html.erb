---
title: 'Using the Annotation Properties view to create an ESB 4.9 Action'
author: 'Max Rydahl Andersen'
layout: blog-post
tags: [ jbosstools, jbds, eclipse, tools, esb, jboss_tools, annotations, tooling, jboss_esb, 4.9 ]
orignallink: ''
---
<body>
<div class="jive-rendered-content">
<p>In my <a class="" href="https://community.jboss.org/en/jbosstools/blog/2010/09/13/extending-the-eclipse-annotation-properties-view">last article</a>, I talked about how to extend the Annotation Properties view provided as part of WTP in Eclipse Helios. And that gets into the implementation details of adding your own annotations.</p>
<p style="min-height: 8pt; height: 8pt; padding: 0px;">&#160;</p>
<p>Here, I'd like to focus on how you'd use the view in conjunction with ESB support in JBoss Tools to actually create a new ESB action using the annotations added as part of ESB 4.9. Now instead of extending the AbstractActionPipelinedProcessor class you can create your own POJO and annotate to indicate various configuration options, as documented <a class="jive-link-wiki-small" href="https://community.jboss.org/docs/DOC-15525">here</a>.</p>
<p style="min-height: 8pt; height: 8pt; padding: 0px;">&#160;</p>
<p>Let's say you want to create a simple PrintMessageAction, similar to the example that extends AbstractActionPipelinedProcessor, but want to see the differences between the two implementations. (You can find the original example implementation in the ESB Programmer's Guide <a class="jive-link-external-small" href="http://docs.redhat.com/docs/en-US/JBoss_Enterprise_SOA_Platform/5/html/ESB_Programmers_Guide/chap-SOA_ESB_Programmers_Guide-Developing_Custom_Actions.html">here</a>.)</p>
<p style="min-height: 8pt; height: 8pt; padding: 0px;">&#160;</p>
<p>The original example code looks like this (Listing 1):</p>
<p style="min-height: 8pt; height: 8pt; padding: 0px;">&#160;</p>
<pre style="border: 1px dashed #999999; padding: 5px; overflow: auto; font-family: Andale Mono,Lucida Console,Monaco,fixed,monospace; color: #000000; background-color: #eeeeee; font-size: 12px; line-height: 14px; width: 100%;"><code>public class PrintMessage extends AbstractActionPipelineProcessor {
<br><br>
&#160; private String information;
&#160; private Integer repeatCount;
<br><br>
&#160; public PrintMessage(ConfigTree config) {
&#160;&#160;&#160; information = config.getAttribute("information");
&#160;&#160;&#160; repeatCount = new Integer(config.getAttribute("repeatCount"));
&#160; }
<br><br>
&#160; public Message process(Message message) throws ActionProcessingException {
&#160;&#160;&#160; for (int i=0; i &lt; repeatCount; i++) {
&#160;&#160;&#160;&#160;&#160; System.out.println(information);
&#160;&#160;&#160; }
&#160; }
}
</code></pre>
<p style="min-height: 8pt; height: 8pt; padding: 0px;">&#160;</p>
<p>As you can see, if you already had a PrintMessage class, you'd have to revamp it a bit to get it to work. Let's say you have this class (Listing 2):</p>
<p style="min-height: 8pt; height: 8pt; padding: 0px;">&#160;</p>
<pre style="border: 1px dashed #999999; padding: 5px; overflow: auto; font-family: Andale Mono,Lucida Console,Monaco,fixed,monospace; color: #000000; background-color: #eeeeee; font-size: 12px; line-height: 14px; width: 100%;"><code>import org.jboss.soa.esb.message.Message;
<br><br>
public class PrintMessage {
&#160; 
&#160; private String information;
&#160; private Integer repeatCount;
&#160; 
&#160; public void printMessage(Message message) {
&#160;&#160;&#160; for (int i=0; i &lt; repeatCount; i++) {
&#160;&#160;&#160;&#160;&#160; System.out.println(information);
&#160;&#160;&#160; }
&#160; }
}
</code></pre>
<p style="min-height: 8pt; height: 8pt; padding: 0px;">&#160;</p>
<p>If you use the new ESB annotations available in ESB 4.9, this becomes much more straightforward (Listing 3):</p>
<p style="min-height: 8pt; height: 8pt; padding: 0px;">&#160;</p>
<pre style="border: 1px dashed #999999; padding: 5px; overflow: auto; font-family: Andale Mono,Lucida Console,Monaco,fixed,monospace; color: #000000; background-color: #eeeeee; font-size: 12px; line-height: 14px; width: 100%;"><code>import org.jboss.soa.esb.message.Message;
<br><br>
public class PrintMessage {
&#160; 
&#160; @ConfigProperty // this will come from the ESB configuration
&#160; private String information;
&#160; @ConfigProperty // this also will come from the ESB configuration
&#160; private Integer repeatCount;
&#160; 
&#160; @Process // and this is the actual action that will get invoked
&#160; public void printMessage(Message message) {
&#160;&#160;&#160; for (int i=0; i &lt; repeatCount; i++) {
&#160;&#160;&#160;&#160;&#160; System.out.println(information);
&#160;&#160;&#160; }
&#160; }
}
</code></pre>
<p style="min-height: 8pt; height: 8pt; padding: 0px;">&#160;</p>
<p>By now you're wondering - so how does the tooling come into this? Well, with the new Annotation Properties view and the ESB annotations we hooked up in the upcoming JBoss Tools 3.2 Beta1 release, you can let the tooling add the annotations for you.</p>
<p style="min-height: 8pt; height: 8pt; padding: 0px;">&#160;</p>
<p>In JBoss Tools, let's say that you have your original PrintMessage class (Listing 2) open in your ESB project and you want to turn it into an ESB action you can configure for the project.</p>
<p style="min-height: 8pt; height: 8pt; padding: 0px;">&#160;</p>
<p>To open and use the Annotation Properties view</p>
<ol>
<li>Go to Window-&gt;Show View-&gt;Other</li>
<li>Type "Annotation" in the search box</li>
<li>Select JAX-WS-&gt;Annotation Properties<br><a href="https://community.jboss.org/servlet/JiveServlet/showImage/38-1970-9586/annotation_show_view.jpg"><img alt="annotation_show_view.jpg" class="jive-image" height="375" src="https://community.jboss.org/servlet/JiveServlet/downloadImage/38-1970-9586/310-375/annotation_show_view.jpg" width="310"></a>
</li>
<li>Click OK.</li>
</ol>
<p style="min-height: 8pt; height: 8pt; padding: 0px;">&#160;</p>
<p>By default, all available annotations are enabled in the view. This will most likely cause you to see a message such as "No suitable library can be found on the projects classpath." To get around this since we're just interested in ESB annotations at this point, we simply filter out the other types.</p>
<p style="min-height: 8pt; height: 8pt; padding: 0px;">&#160;</p>
<p>To change the filtered annotation types:</p>
<ol>
<li>In the View Menu for the Annotation Properties view, select "Filters..."</li>
<li>When the Selection Needed dialog appears, make sure that all other annotation types are checked except for JBoss ESB<a href="https://community.jboss.org/servlet/JiveServlet/showImage/38-1970-9584/annotation_props_view_filters.jpg"><img alt="annotation_props_view_filters.jpg" class="jive-image" height="406" src="https://community.jboss.org/servlet/JiveServlet/downloadImage/38-1970-9584/310-406/annotation_props_view_filters.jpg" width="310"></a>
</li>
<li>Click OK</li>
</ol>
<p style="min-height: 8pt; height: 8pt; padding: 0px;">&#160;</p>
<p>Now, with your PrintMessage class open and the Annotation Properties view open and filtered for ESB annotations, select the "information" class variable. In the Annotations list, you should see org.jboss.soa.esb.configure.ConfigProperty appear, as in the following image:</p>
<p><a href="https://community.jboss.org/servlet/JiveServlet/showImage/38-1970-9541/InformationVariableAnnotation.jpg"><img alt="InformationVariableAnnotation.jpg" class="jive-image-thumbnail jive-image" height="336" src="https://community.jboss.org/servlet/JiveServlet/downloadImage/38-1970-9541/450-336/InformationVariableAnnotation.jpg" width="450"></a></p>
<p>If you click the "Values" checkbox beside the ConfigProperty annotation, you'll see @ConfigProperty() appear above the variable. Do it again for the repeatCount variable as well.</p>
<p><a href="https://community.jboss.org/servlet/JiveServlet/showImage/38-1970-9542/repeatCountVariableAnnotation.jpg"><img alt="repeatCountVariableAnnotation.jpg" class="jive-image-thumbnail jive-image" height="336" src="https://community.jboss.org/servlet/JiveServlet/downloadImage/38-1970-9542/450-336/repeatCountVariableAnnotation.jpg" width="450"></a></p>
<p>The last step is to click on the method line for printMessage(Message message) and check the @Process annotation box.</p>
<p><a href="https://community.jboss.org/servlet/JiveServlet/showImage/38-1970-9543/printMessageAnnotation.jpg"><img alt="printMessageAnnotation.jpg" class="jive-image-thumbnail jive-image" height="336" src="https://community.jboss.org/servlet/JiveServlet/downloadImage/38-1970-9543/450-336/printMessageAnnotation.jpg" width="450"></a></p>
<p>And that's it for this example. You'll notice if you look closely at the @ConfigProperty annotation in the Annotation Properties view that you can expand it and set different properties on the annotation as well. So there is room for further configuration there.</p>
<p style="min-height: 8pt; height: 8pt; padding: 0px;">&#160;</p>
<p>Once you configure your action in an ESB configuration file and deploy it, you can test it. In this case, I'm using a simple JMS queue to send a message to the service to trigger it. The action gets the configuration from the properties we set in the jboss-esb.xml file, and we can see the output in the console:</p>
<p><a href="https://community.jboss.org/servlet/JiveServlet/showImage/38-1970-9583/esb_config_and_run.jpg"><img alt="esb_config_and_run.jpg" class="jive-image-thumbnail jive-image" height="272" src="https://community.jboss.org/servlet/JiveServlet/downloadImage/38-1970-9583/450-272/esb_config_and_run.jpg" width="450"></a></p>
<p>So starting with the JBoss Tools 3.2 Beta you'll have some new tools in the ESB toolbox for custom actions!</p>
</div>
<!-- [DocumentBodyEnd:9579ae32-fb75-4f6d-a2c1-5ccb347c940e] -->
</body>
